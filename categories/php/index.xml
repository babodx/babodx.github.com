<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Php on 鑫的方向</title>
    <link>https://xinlogs.com/categories/php/</link>
    <description>Recent content in Php on 鑫的方向</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 15 Apr 2014 21:15:00 +0000</lastBuildDate>
    
	<atom:link href="https://xinlogs.com/categories/php/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>owncloud打包zip下载文件名乱码</title>
      <link>https://xinlogs.com/post/2014-04-15-owncloud-zip-filename/</link>
      <pubDate>Tue, 15 Apr 2014 21:15:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2014-04-15-owncloud-zip-filename/</guid>
      <description>最近在单位部署了一套owncloud使用。感觉作为内部网盘使用，效果还是挺好的。 不过今天同事发现，选择多个文件一起下载的时候，会出现乱码问题。 多个文件下载会自动打包成一个zip文件进行下载，下载后的文件在windows机器打开就出现文件名乱码了。
##解决办法## 网站搜索了下解决办法，基本上是因为打包zip的时候，文件名编码处理问题造成的。
打包zip主要调用了/var/www/html/owncloud/lib/private/files.php文件
修改下这个文件，将文件名转为windows可以识别的GBK编码就ok了。
69行附近
foreach ($files as $file) { $file = $dir . &#39;/&#39; . $file; if (\OC\Files\Filesystem::is_file($file)) { $tmpFile = \OC\Files\Filesystem::toTmpFile($file); self::$tmpFiles[] = $tmpFile; $u8filename=iconv(&amp;quot;UTF-8&amp;quot;,&amp;quot;GBK&amp;quot;,basename($file)); //for utf8 //$zip-&amp;gt;addFile($tmpFile, basename($file)); $zip-&amp;gt;addFile($tmpFile,$u8filename); } elseif (\OC\Files\Filesystem::is_dir($file)) { self::zipAddDir($file, $zip); } }  200行附近
public static function zipAddDir($dir, $zip, $internalDir=&#39;&#39;) { $dirname=basename($dir); $dirname=iconv(&amp;quot;UTF-8&amp;quot;,&amp;quot;GBK&amp;quot;,$dirname); //for utf8 $zip-&amp;gt;addEmptyDir($internalDir.$dirname); $internalDir.=$dirname.=&#39;/&#39;; $files=OC_Files::getDirectoryContent($dir); foreach($files as $file) { $filename=$file[&#39;name&#39;]; $file=$dir.&#39;/&#39;.$filename; if(\OC\Files\Filesystem::is_file($file)) { $tmpFile=\OC\Files\Filesystem::toTmpFile($file); OC_Files::$tmpFiles[]=$tmpFile; $filename=iconv(&amp;quot;UTF-8&amp;quot;,&amp;quot;GBK&amp;quot;,$filename); //for utf8 $zip-&amp;gt;addFile($tmpFile, $internalDir.</description>
    </item>
    
    <item>
      <title>批量更换115网盘链接</title>
      <link>https://xinlogs.com/post/2012-08-08-update-115disk-urls/</link>
      <pubDate>Fri, 10 Aug 2012 14:31:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2012-08-08-update-115disk-urls/</guid>
      <description>今天115网盘关闭了对外分享链接的功能。我的客户有人是用115网盘作为服务器资源存储用的，网站上下载资源都是采用115网盘地址来发布的。这样直接造成全部资源都无法下载了，我临时写了个php脚本来更新全部的115网盘链接到本地服务器地址。 主要思路：
首先将网盘里的资源全部下载到服务器，然后导出一个网盘地址和文件实际名字的列表
如下所示：
http://115.com/file/e78cpfjd#Dark_Room.rar http://115.com/file/e78cpwkh#Dark_Energy.rar  可以看到前面是网盘下载的url，＃号后面是实际的文件名。
我将这个列表保存在一个文件里，便于php脚本获取。
然后编写一个php脚本，把文件里每行的url取出来，到数据库里把这个下载链接替换为我们服务器上的地址。主要是采用mysql的replace函数实现 脚本如下：
#!/usr/bin/php &amp;lt;?php print(&amp;quot;=======fix_url v1=========\n&amp;quot;); print(&amp;quot;=======write by babodx@gmail.com=======\n&amp;quot;); function update_url($url) { list($url_115,$url_tv1926)=explode(&amp;quot;#&amp;quot;,$url); $url_tv1926=&amp;quot;http://xiazai.tv1926.com/&amp;quot;.$url_tv1926; print(&amp;quot;update:&amp;quot;); print($url_115); print(&amp;quot;&amp;gt;&amp;gt;&amp;quot;); $link = mysql_connect(&#39;localhost&#39;, &#39;username&#39;, &#39;passwd&#39;); if (!$link) { die(&#39;Could not connect: &#39; . mysql_error()); } mysql_select_db(&#39;my_database&#39;, $link) or die (&#39;Can\&#39;t use my_database : &#39; . mysql_error()); $sql=&amp;quot;update p8_article_content_101 set my_801=replace(my_801,&#39;&amp;quot;.$url_115.&amp;quot;&#39;,&#39;&amp;quot;.$url_tv1926.&amp;quot;&#39;)&amp;quot;; mysql_query(&amp;quot;set names gbk&amp;quot;); $result = mysql_query($sql) or die(&amp;quot;Invalid query: &amp;quot; . mysql_error()); mysql_close($link); print($url_tv1926); print(&amp;quot;\n&amp;quot;); } if (is_null($argv[1])) { print(&amp;quot;argv1 is null\n&amp;quot;); exit(); } $file_name=$argv[1]; print(&amp;quot;get files name.</description>
    </item>
    
    <item>
      <title>配置ecshop通过本地esmtp发信</title>
      <link>https://xinlogs.com/post/2012-07-22-config-esmtp-via-gmail-sendmail/</link>
      <pubDate>Sun, 22 Jul 2012 22:12:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2012-07-22-config-esmtp-via-gmail-sendmail/</guid>
      <description>#问题：#
最近有个客户的ecshop总是卡在下订单的地方。查询了下日志。发现如下
script_filename = /public_html/quick_buy.php [0x0a29511c] fgets() /public_html/includes/cls_smtp.php:314 [0x0a295074] get_data() /public_html/includes/cls_smtp.php:230 [0x0a294f5c] auth() /public_html/includes/cls_smtp.php:146 [0x0a294da8] send() ~:299 [0x0a293e80] send_mail() ~:2161  发现问题主要是因为在ecshop里的邮件服务器设置了采用其他smtp服务器方式。我估计是到达smtp服务器验证的时间有时候太长，导致这个订单流程失败。
看到ecshop推荐采用本地邮件服务来发信，于是开始考虑采用这个方式。
客户的服务器采用centos的linux服务器，php 5.3.8。
首先说说php的mail函数的条件，需要在php.ini里面指定sendmail_path.
先说下最简单的方式，就是服务器上安装sendmail，然后调用sendmail发送邮件。
如果怕服务器sendmail不正常，最好卸载下再重新安装。
卸载： yum remove sendmail 安装 yum install sendmail
再设置下php.ini里的sendmail_path=/usr/sbin/sendmail -t -i
这样后，就可以通过ecshop里面的本地邮件服务发信了。不过这种方式有个致命缺点，因为一般我们的服务器都不被大的邮件服务商认可，所以这样发过去的邮件基本都是被拦截后者放入垃圾邮件里。
#解决方法：#
还是采用本地邮件服务，不过本地只是一个代理的作用，由本地的代理程序调用gmail的stmp功能发送邮件。
本地安装esmtp程序，用来将我们的邮件通过gmail的帐号发送。这样就可以避免邮件被拦截或者认为是垃圾邮件了。
为了一会测试方便，我们先安装一个linux下的邮件客户程序
yum install mailx
安装后，我们就有了mail命令。可以通过下面的命令来发信到babodx@qq.com的邮箱
echo &amp;quot;测试&amp;quot;|mail -s &amp;quot;ceshi&amp;quot; babodx@qq.com  ##安装esmtp：##
为了安装esmtp，我们必须先安装它依赖的一个库文件libesmtp-1.0.6
###安装libesmtp-1.0.6###
 tar zxvf libesmtp-1.0.6.tar.gz cd libesmtp-1.0.6 ./configure make make install  ###安装esmtp 1.2###</description>
    </item>
    
    <item>
      <title>php eaccelerator vs fastcgi_cache性能比较</title>
      <link>https://xinlogs.com/post/2012-01-19-php-eaccelerator-vs-fastcgi-cache/</link>
      <pubDate>Thu, 19 Jan 2012 10:15:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2012-01-19-php-eaccelerator-vs-fastcgi-cache/</guid>
      <description>最近放假一直在家里测试php如何优化性能。 今天比较了下默认php、eaccelerator和fastcgi_cache的性能。
先介绍下我的测试环境： 这次是在我VPS上做的测试：cpu 为1颗Intel&amp;reg; Core&amp;trade; i7-2600 CPU @ 3.40GHz，内存256M 系统为centos 5.6 32bit php版本 5.3.8 web服务采用Tengine/1.2.1，其实就是nginx
测试文件一个采用phpinfo.php，这个就是phpinfo()函数输出页面。另外一个就是采用我博客首页http://xinlogs.com 注：我的博客采用emlog 4.1 下面进入我的测试。。。。
php先用默认状态，不加载eaccelerator模块。 测试phpinfo.php,连续访问3000次，采用10个并发请求。
ab -n 3000 -c 10 http://xinlogs.com/phpinfo.php Server Software: Tengine/1.2.1 Server Hostname: xinlogs.com Server Port: 80 Document Path: /phpinfo.php Document Length: 54365 bytes Concurrency Level: 10 Time taken for tests: 7.557223 seconds Complete requests: 3000 Failed requests: 0 Write errors: 0 Total transferred: 163608000 bytes HTML transferred: 163095000 bytes Requests per second: 396.</description>
    </item>
    
    <item>
      <title>php性能调试工具</title>
      <link>https://xinlogs.com/post/2011-12-30-php-performance-debugging-tools/</link>
      <pubDate>Fri, 30 Dec 2011 14:55:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2011-12-30-php-performance-debugging-tools/</guid>
      <description>最近在帮一些客户优化php性能。
排除掉服务器环境、memcache这些办法后，剩下的就是找php代码有没有执行过慢的因素了。
下面列出一些在php性能调试中可以用到的工具。
1、xdebug 这个工具大家都很熟悉，开始php过程中，用来调试程序用的。
2、webgrind 这个工具主要是配合xdebug来使用，用来监测php执行时间的。
3、XHProf 这个工具据说比xdebug轻量，可以考虑用于生产环境下来监测php性能。没有用过，看介绍很棒！facebook用的，肯定差不了。 以上只是简单介绍下，用来记录。等以后有机会仔细用来，再发文档说明</description>
    </item>
    
    <item>
      <title>php-fpm查找php慢速代码</title>
      <link>https://xinlogs.com/post/2011-12-29-find-php-slow-code/</link>
      <pubDate>Thu, 29 Dec 2011 21:45:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2011-12-29-find-php-slow-code/</guid>
      <description>前两天帮助一个客户优化ecshop。 他的ecshop代码是找人修改过的，修改后速度已很很慢，大概打开一页需要9s吧。 而默认的ecshop在同样服务器上速度就很快。 开始走了很多弯路，因为只是速度慢，并无错误。就没有想到是代码的原因。 对比两个ecshop，首先发现首页加载的request数量差距很大，慢的站点105次，快的46次。 而且慢的站点1.66M大小，而快的只有455k。通过开启gzip和合并css、js等手段优化后，效果并不明显。 后来想到可能是因为找人修改过代码，开始怀疑到代码上（也确实没啥办法了）。 想到php-fpm可以记录下执行过慢的php脚本，于是修改php-fpm配置，加入了记录慢速php请求的代码。
下面是在php 5.3.8下的php-fpm.conf文件添加的内容
request_slowlog_timeout=5s slowlog=/var/log/fpm_slow.log  这个配置会将php脚本执行超过5秒的，记录在/var/log/fpm_slow.log文件中。 如果你的php还是5.2.x的版本，那么php-fpm还是以补丁的形式执行，请参考下面的配置文件
The timeout (in seconds) for serving of single request after which a php backtrace will be dumped to slow.log file &#39;0s&#39; means &#39;off&#39; &amp;lt;value name=&amp;quot;request_slowlog_timeout&amp;quot;&amp;gt;0s&amp;lt;/value&amp;gt; The log file for slow requests &amp;lt;value name=&amp;quot;slowlog&amp;quot;&amp;gt;logs/slow.log&amp;lt;/value&amp;gt;  最终在/var/log/fpm_slow.log文件里，发现很多如下记录
[27-Dec-2011 10:07:27] [pool www] pid 8524 script_filename = /data/huaximall/flow.php [0x0a0f41c0] fsockopen() !:649 [0x0a0f4104] _connect_sock() !:937 [0x0a0f3fdc] sock_to_host() !:693 [0x0a0f3f08] get_sock() !</description>
    </item>
    
    <item>
      <title>bbsxp 6.0数据导入phpwind 8.7方法</title>
      <link>https://xinlogs.com/post/2011-12-14-bbsxp6-to-phpwind8/</link>
      <pubDate>Wed, 14 Dec 2011 23:12:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2011-12-14-bbsxp6-to-phpwind8/</guid>
      <description>今天帮助猪八戒网上的一个客户将原来的bbsxp 6.0的论坛数据迁移到phpwind 8.7下。这里主要记录下思路
phpwind官方论坛有各种的迁移程序，但是继续bbsxp的最早版本是2008. 而我这个客户的是bbsxp 6的access库。
完成这个任务，我顺利升级到猪三戒！呵呵
没有现成的，只能自己分析了。
为了导入方便，我先将需要用到的数据从access的库导入mysql里。
这样bbsxp的表和新安装的phpwind表都在一个库了。
数据分析
这个步骤主要分析用户数据、论坛的板块数据、帖子、回帖等数据的格式。找到两个表的数据关系，为后面导入数据打下基础。
数据迁移
用户数据
INSERT INTO pw_members(uid,username,password,email,icon,gender,regdate,signature,site,bday) SELECT ID,UserName,lower(UserPass),UserMail,UserFace,UserSex,UNIX_TIMESTAMP(UserRegTime),UserSign,UserHome,Birthday From bbsxp_users;  INSERT INTO pw_memberdata(uid,postnum,rvrc,money) SELECT ID,PostTopic,PostRevert,UserMoney From bbsxp_users;  帖子数据
INSERT INTO pw_threads(tid,fid,author,subject,ifcheck,postdate,lastpost,lastposter,hits,replies) SELECT ID,ForumID,UserName,Topic,1,UNIX_TIMESTAMP(PostTime),UNIX_TIMESTAMP(LastTime),LastName,Views,Replies From bbsxp_threads;  INSERT INTO pw_tmsgs(tid,content) SELECT ThreadID,Content From bbsxp_posts2 where IsTopic=1;  update pw_threads set authorid = (SELECT uid from pw_members WHERE username=pw_threads.author);  回帖数据
INSERT INTO pw_posts(pid,tid,author,postdate,subject,ifcheck,content) SELECT ID,ThreadID,UserName,UNIX_TIMESTAMP(PostTime),Subject,1,Content From bbsxp_posts2 where IsTopic=0;  update pw_posts set authorid = (SELECT uid from pw_members WHERE username=pw_posts.</description>
    </item>
    
    <item>
      <title>如何找到执行慢的php程序</title>
      <link>https://xinlogs.com/post/2011-12-09-check-slow-php-script/</link>
      <pubDate>Fri, 09 Dec 2011 19:56:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2011-12-09-check-slow-php-script/</guid>
      <description>最近在帮助一个网站做性能优化。 从原来的windows平台切换到了linux平台。php环境也已经变为主流的Nginx+php-fpm+eAccelerator+Zend Optimization组合 打开了MySQL的慢连接，发现基本集中在论坛的表查询上，但是我们如何定位有哪些php程序在执行的时候过慢呢？
通过查看php-fpm.conf配置，可以找到如下配置信息
The timeout (in seconds) for serving of single request after which a php backtrace will be dumped to slow.log file &#39;0s&#39; means &#39;off&#39; &amp;lt;value name=&amp;quot;request_slowlog_timeout&amp;quot;&amp;gt;0s&amp;lt;/value&amp;gt; The log file for slow requests &amp;lt;value name=&amp;quot;slowlog&amp;quot;&amp;gt;logs/slow.log&amp;lt;/value&amp;gt;  request_slowlog_timeout 项是一个设定超过多长时间就会被记录到slow.log日志中。0s为关闭这个选项。
下面的slowlog为设置slow.log文件的位置。
打开这个以后，我们就可以看到哪些php文件用了过多的执行时间，来重点优化。 而且php-fpm.log也回提示出执行时间超过这个设定的信息。
下面是php-fpm.log的提示
Dec 09 20:19:25.170259 [WARNING] fpm_request_check_timed_out(), line 146: child 28844, script &#39;/data/htdocs/bbs/forumdisplay.php&#39; (pool default) executing too slow (3.110822 sec), logging  提示forumdisplay.php文件执行过慢，用了3.110822秒
再来看看slow.log的内容
Dec 09 20:23:49.534250 pid 28865 (pool default) script_filename = /data/htdocs/t/bbs/forumdisplay.</description>
    </item>
    
    <item>
      <title>emlog支付插件发布</title>
      <link>https://xinlogs.com/post/2011-11-20-emlog-alipay-pulgin/</link>
      <pubDate>Sun, 20 Nov 2011 19:29:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2011-11-20-emlog-alipay-pulgin/</guid>
      <description>今天看到支付宝可以采用http://me.alipay.com/用户名的形式创建自己的收款页面。以前要想写支付宝的付款插件，需要先申请一个商家用户，拿到分配你的密钥才可以。现在可以通过创建收款主页来直接收款，对于程序开发方便了很多（不过这个方式只能简单的收款，并不能用于商品的订单，没有回调函数不能知道是否收款成功等内容）。 而且看到wordpress貌似已经有了这样的插件可以用来发布一个收款按钮，于是我也心血来潮写了一个。主要还是为了学习如何写一个emlog的插件。看着官方的插件开发文档，参考着公告插件的代码来写的这个支付宝收款插件。 主要功能：
1、在博客的侧边栏显示出一个支付宝的收款按钮，基本也就是用来让人家自愿捐款用。如下图：
2、后台可以方便的设置用来收款的支付宝收款主页地址。</description>
    </item>
    
    <item>
      <title>emlog访问速度优化之minify整合css与js文件</title>
      <link>https://xinlogs.com/post/2011-11-17-emlog-optimize-via-minify/</link>
      <pubDate>Thu, 17 Nov 2011 20:56:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2011-11-17-emlog-optimize-via-minify/</guid>
      <description>我们知道网站的访问速度和很多因素相关，但是今天这里只是优化我们能力范围内的首页文件加载数量与大小。
如果首页文件很大，肯定加载慢。还有一个因素就是首页如果加载很多css和js文件，因为在加载过程中会建立很多次连接从而降低访问首页的速度。
下面是我博客默认情况下的加载css和js文件的数量
从图上可以看到加载了4个css文件和5个js文件。大小分别为54.2kb和45.5kb。 下面我们的主要工具出场：minify
这个程序是纯php编写的开源程序，用来将我们网站的css和js文件进行整合与压缩。这样我们就可以通过整合css与js文件并压缩大小从而提高首页加载速度。 首先将minify下载，我这里采用的是minify_2.1.3版本。将下载后的min目录放到网站的根目录。 接着我们改造我们的程序，让css与js文件通过minify程序合并压缩。 我是自己写了一个类，我起名为merge.php用来调用minify整合。下面是类代码
&amp;lt;?php /** * JS和CSS文件合并类 * * @copyright (c) xinlogs.com All Rights Reserved * $Id: merge.php 2011-11-16 09:54:58Z xinlogs.com$ */ class Merge { //定义两个数组用来存储全部css和js文件的位置 static private $css_list=array(); static private $js_list=array(); static private $js_code=array(); //定义addCssFile方法，用来添加css文件到数组 static function addCssFile($addFilePath) { array_push(self::$css_list,$addFilePath); } //定义getCssList方法，用来返回css文件字符串 static function getCssList(){ return implode(&amp;quot;,&amp;quot;,self::$css_list); } //定义addJsFile方法，用来添加js文件到数组 static function addJsFile($addFilePath) { array_push(self::$js_list,$addFilePath); } //定义getJsList用来返回js文件字符串 static function getJsList(){ return implode(&amp;quot;,&amp;quot;,self::$js_list); } //加入js代码 static function addJsCode($addJsCode) { array_push(self::$js_code,$addJsCode); } static function includejscode(){ return implode(&amp;quot; &amp;quot;,self::$js_code); } //用来返回加入CSS代码的语句 static function includecss() { $css=&amp;quot;&amp;lt;link href=&amp;quot;.</description>
    </item>
    
    <item>
      <title>修改EMiDream模板</title>
      <link>https://xinlogs.com/post/2011-10-26-mod-template-emidream/</link>
      <pubDate>Wed, 26 Oct 2011 19:40:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2011-10-26-mod-template-emidream/</guid>
      <description>今天修改了EMiDream模板。这个模板是给wordpress制作的，应用在http://www.templatesnext.org/网站 我是在emlog论坛找到了“通信民工”修改的过来的版本。 我所做的修改如下： 1、首页每条博客下面变为了中文的 评论 和 浏览 这个修改主要是在log_list.php文件中，将28、29行改为如下内容
 &amp;lt;span class=&amp;quot;postcomments&amp;quot;&amp;gt;&amp;lt;a href=&amp;quot;&amp;lt;?php echo $value[&#39;log_url&#39;]; ?&amp;gt;#comments&amp;quot; title=&amp;quot;查询评论&amp;quot;&amp;gt;评论：&amp;lt;?php echo $value[&#39;comnum&#39;]; ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;span class=&amp;quot;postmore&amp;quot;&amp;gt;浏览：&amp;lt;?php echo $value[&#39;views&#39;]; ?&amp;gt;&amp;lt;/span&amp;gt;  2、友情链接只在首页的时候显示，这个有利于SEO。 主要是通过修改module.php实现。找到文件中关于友情链接段代码，然后在代码前后加入判断是否为首页的代码。 具体代码如下：
&amp;lt;?php //判断是否是首页，不是首页，不显示友情链接 if(&amp;quot;http://&amp;quot;.$_SERVER[&#39;HTTP_HOST&#39;].$_SERVER[&#39;REQUEST_URI&#39;] == BLOG_URL):?&amp;gt; &amp;lt;?php //widget：链接 function widget_link($title){ global $CACHE; $link_cache = $CACHE-&amp;gt;readCache(&#39;link&#39;); ?&amp;gt; &amp;lt;div class=&amp;quot;widget-cat&amp;quot;&amp;gt; &amp;lt;h4&amp;gt;&amp;lt;?php echo $title; ?&amp;gt;&amp;lt;/h4&amp;gt; &amp;lt;ul id=&amp;quot;link&amp;quot;&amp;gt; &amp;lt;?php foreach($link_cache as $value): ?&amp;gt; &amp;lt;li&amp;gt;&amp;lt;a href=&amp;quot;&amp;lt;?php echo $value[&#39;url&#39;]; ?&amp;gt;&amp;quot; title=&amp;quot;&amp;lt;?php echo $value[&#39;des&#39;]; ?&amp;gt;&amp;quot; target=&amp;quot;_blank&amp;quot;&amp;gt;&amp;lt;?php echo $value[&#39;link&#39;]; ?&amp;gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt; &amp;lt;?php endforeach; ?</description>
    </item>
    
    <item>
      <title>微博从bo-blog迁移到了emlog。</title>
      <link>https://xinlogs.com/post/2011-10-25-bo-blog-to-emlog/</link>
      <pubDate>Tue, 25 Oct 2011 22:05:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2011-10-25-bo-blog-to-emlog/</guid>
      <description>今天将微博从原来的bo-blog迁移到了emlog
bo-blog从08年就一直开始使用。感觉还是很不错的。但是一直没怎么更新了，目前很多新功能都不支持。
其实我就打算让博客可以和新浪微博同步。新浪微博里也有个关联博客的功能，据说可以通过博客的rss内容来同步内容。
但是我参考网上文章修改了bo-blog模板，让首页里存在 http://www.xinlogs.com/feed&amp;ldquo; title=&amp;ldquo;鑫的方向&amp;rdquo; /&amp;gt; 然后又测试了http://www.xinlogs.com/feed，可以正常访问。 但是新浪微博就是不能同步到我博客的内容。 最后我发现emlog目前的更新很活跃，而且还有个插件是调用新浪微博的api来将博客内容同步到微博的。就开始了我的迁移过程 迁移主要参考了http://bbs.bo-blog.com/thread-28348-1-1.html 原文如下： 转换过程很简单，先下载并安装emlog_4.0.1，再将原BoBlog中的attachment和data文件夹以及附件中的转换工具上传到新装emlog根目录，执行转换工具按照提示运行即可。
最终可以将BoBlog中的所有数据比较完美地导入emlog_4.0.1，包括原来BoBlog中的附件和自定义URL等等。对于emlog不支持UBB的问题其实应该很好解决：将UBB解析之后再导入数据库即可。由于我的777篇日志绝大部分不含UBB代码所以就没有继续折腾了…… 注意： 我转换后，没有文章的分类了。但是查看数据库的sort表确实存在分类信息。这个时候，只要在后台建立一个分类。然后其他分类就都出现了。感觉转换效果很不错。</description>
    </item>
    
    <item>
      <title>关联bo-blog到新浪微博</title>
      <link>https://xinlogs.com/post/2011-10-20-boblog-relation-weibo/</link>
      <pubDate>Thu, 20 Oct 2011 18:03:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2011-10-20-boblog-relation-weibo/</guid>
      <description>主要参考了http://www.cnwyw.net/post/bo-blog-guan-lian-bo-ke-xin-lang-wei-bo/ 基本就是修改模板里的elements.php文件 将href=&amp;ldquo;feed.php&amp;rdquo;修改为href=http://yourdomain/feed.php </description>
    </item>
    
    <item>
      <title>给bo-blog加上新浪的微博秀</title>
      <link>https://xinlogs.com/post/2011-10-20-boblog-add-weiboshow/</link>
      <pubDate>Thu, 20 Oct 2011 14:09:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2011-10-20-boblog-add-weiboshow/</guid>
      <description>首先在新浪微博的“微博小工具”内找到“微博秀”。然后根据自己的需要设置好样式和大小。 从下面的
“设置完成，获得嵌入代码： ”框内粘贴出代码。 
回到bo-blog后台，从“常规管理”-&amp;gt;“模块配置”项了，添加一个“侧边模块”，起个名字叫新浪微博。  最后将刚才的代码贴进去。就可以了</description>
    </item>
    
    <item>
      <title>bo-blog 2.1.1如何加入google广告条</title>
      <link>https://xinlogs.com/post/2009-12-31-bo-blog-insert-googleadsense/</link>
      <pubDate>Thu, 31 Dec 2009 16:29:00 +0000</pubDate>
      
      <guid>https://xinlogs.com/post/2009-12-31-bo-blog-insert-googleadsense/</guid>
      <description>刚开始使用的bo-blog的时候也不知道如何加入google广告条，经过这几天的咕哝，现在已经成功在右边和下面加入。方法记录如下
右侧边栏加入google广告
进入后台管理-&amp;gt;常规管理-&amp;gt;模块配置
点击左侧的新建/编辑项目 如图
然后在手动添加项目中选择侧边模块，确定。如图
确认后，进入到新增/编辑项目页面
项目名称&amp;ndash;这个是在后台编辑的时候，给自己分辨模块用的，随意命名。我的叫做googleadsense，注意：只能字母和数字
项目描述&amp;ndash;随意填写
抬头文字&amp;ndash;显示在首页侧边栏上，我的叫做广告栏，根据个人情况写
栏目内容&amp;ndash;这里写入google的广告代码就可以了
这个办法最容易，不用修改模板。如果加入后，首页显示google广告栏，里面内容是白的，不要着急，过段时间就可以显示了。我第一个广告大约在30分钟后，才正确显示出来。
博客底部加入google广告
底部加入广告，也可以用上面类似的办法，通过加入底部模块实现。但是我尝试了，不好对齐，而且有的模板会破坏底部风格。所以我没有用添加底部模块的办法。
我采用直接修改模板的elements.php文件方法。
到bo-blog的template目录下，找到自己使用的模板文件夹，我用的neowin2，所以对应目录就是neowin2
在模板目录下，打开elements.php文件。找到文件里的displayfooter位置，在displayfooter段里面加入google广告代码。入下所示
$elements[&#39;displayfooter&#39;]=&amp;lt;&amp;lt;&amp;lt;eot &amp;lt;div class=&amp;quot;clear&amp;quot;&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;div class=&amp;quot;content-box-b&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;content-box-b-r&amp;quot;&amp;gt; &amp;lt;div class=&amp;quot;content-box-b-l&amp;quot;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; /* 下面为google广告代码 */ &amp;lt;center&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot;&amp;gt;&amp;lt;!-- google_ad_client = &amp;quot;pub-2759888315234430&amp;quot;; /* 728x90, ... 09-12-21 */ google_ad_slot = &amp;quot;9531615827&amp;quot;; google_ad_width = 728; google_ad_height = 90; //--&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;script type=&amp;quot;text/javascript&amp;quot; src=&amp;quot;http://pagead2.googlesyndication.com/pagead/show_ads.js&amp;quot;&amp;gt; &amp;lt;/script&amp;gt; &amp;lt;/center&amp;gt; /*google广告代码结束*/ &amp;lt;div id=&amp;quot;footer&amp;quot;&amp;gt; &amp;lt;div id=&amp;quot;footer-r&amp;quot;&amp;gt; &amp;lt;div id=&amp;quot;footer-l&amp;quot;&amp;gt; &amp;lt;div id=&amp;quot;footer-misc&amp;quot;&amp;gt; Skin By &amp;lt;a href=&amp;quot;http://www.</description>
    </item>
    
  </channel>
</rss>